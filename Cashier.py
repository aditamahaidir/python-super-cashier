# -*- coding: utf-8 -*-
"""Cashier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rNB5ue6eV7Wl_azVWGlof26_qE_UX0sd
"""

import pandas as pd

class Transaction:
  def __init__(self):
    '''
    fungsi yang menginisialisasi dictionary data transaksi
    '''
    self.data_item = dict()

  def add_item(self, name_item, amount_item, price_item):
    '''
    fungsi menambahkan item ke data transaksi

    Arguments:
      name_item {str} -- Nama item baru
      amount_item {int} -- Jumlah item baru
      price_item {int} -- Harga satuan item baru
        
    Raises:
      ValueError -- Jika jumlah barang dan/atau harga barang bukan tipe integer/bilangan bulat
    '''
    try: # Blok kode ini mencoba mengeksekusi kode di dalamnya
      # Mengecek apakah input jumlah item dan harga item merupakan integer atau tidak
      if not isinstance(amount_item, int) or not isinstance(price_item, int):
         # Jika input bukan integer, akan memunculkan pesan error "Kesalahan Input: Jumlah barang dan/ Harga barang harus berupa angka bilangan bulat/integer."
        raise ValueError("Kesalahan Input: Jumlah barang dan/ Harga barang harus berupa angka bilangan bulat/integer.")
      total_price = amount_item * price_item # Menghitung harga total item
      self.data_item[name_item] = [amount_item, price_item, total_price] # Menambahkan data item baru ke dictionary data_item
    # Menangkap kesalahan yang terjadi saat mengeksekusi kode di dalam try
    except ValueError as ve:
      print(ve) # Mencetak pesan error

  def update_amount_item(self, name_item, new_amount):
    '''
    fungsi untuk memperbarui data jumlah barang di record yang sudah ada

    Arguments:
      name_item {str} -- Nama item yang akan diupdate
      new_amount {int} -- Jumlah item baru
        
    Raises:
      KeyError -- Jika nama item tidak ditemukan dalam data transaksi
      ValueError -- Jika jumlah barang baru bukan tipe integer/bilangan bulat
    '''
    try: # Try-except block digunakan untuk menangani kemungkinan error saat memperbarui jumlah barang
      if not isinstance(new_amount, int): # Mengecek apakah input jumlah barang terbaru adalah integer
        raise ValueError
      if name_item in self.data_item.keys(): # Mengecek apakah nama barang sudah terdaftar dalam data transaksi
        #Memperbarui jumlah barang dan harga total barang
        self.data_item[name_item][0] = new_amount
        self.data_item[name_item][2] = self.data_item[name_item][0] * self.data_item[name_item][1]
      else:
        # Keluarkan error jika nama barang tidak ditemukan dalam data transaksi
        raise KeyError
    except KeyError: #Menangkap  error jika nama barang tidak ditemukan dalam data transaksi
        print(f"Nama barang '{name_item}' tidak ditemukan dalam data transaksi.")
    except ValueError: #Menangkap error jika input jumlah barang terbaru bukan integer
        print(f"Kesalahan Input Jumlah Barang Terbaru: {new_amount} harus berupa angka bilangan bulat/integer.")
  
  def update_price_item(self, name_item, new_price):
    '''
    fungsi untuk memperbarui data harga satuan barang di record yang sudah ada

    Arguments:
      name_item {str} -- Nama item yang akan diupdate
      new_price {int} -- Harga satuan item baru
        
    Raises:
      KeyError -- Jika nama item tidak ditemukan dalam data transaksi
      ValueError -- Jika harga satuan baru bukan tipe integer/bilangan bulat
    '''
    # Block kode berikut ini berfungsi untuk mengubah harga satuan barang dalam data transaksi
    try:
      # Mengecek apakah input harga baru berupa angka bilangan bulat/integer
      if not isinstance(new_price, int):
        raise ValueError # Mengirimkan Exception jika input harga baru tidak sesuai
      # Mengecek apakah nama barang ada dalam data transaksi
      if name_item in self.data_item.keys():
        amount_item = self.data_item[name_item][0]  # Mengambil jumlah barang yang dibeli
        total_price = amount_item * new_price # Menghitung harga total barang yang dibeli
        self.data_item[name_item][1] = new_price # Mengubah harga satuan barang
        self.data_item[name_item][2] = total_price # Mengubah harga total barang yang dibeli
      else:
        # Mengirimkan Exception jika nama barang tidak ditemukan dalam data transaksi
        raise KeyError
    # Blok kode untuk menangani Exception KeyError
    except KeyError:
        # Menampilkan pesan error jika nama barang tidak ditemukan dalam data transaksi
        print(f"Nama barang '{name_item}' tidak ditemukan dalam data transaksi.")
    # Blok kode untuk menangani Exception ValueError
    except ValueError:
        # Menampilkan pesan error jika input harga baru tidak sesuai
        print(f"Kesalahan Input Harga Satuan Barang Terbaru: {new_price} harus berupa angka bilangan bulat/integer.")
  
  def update_name_item(self, name_item, new_name):
    '''
    fungsi untuk memperbarui data nama barang di record yang sudah ada

    Arguments:
      name_item   : str   Nama Barang yang akan diperbarui
      new_name    : str   Nama Barang Terbaru

    Raises:
      KeyError -- Jika nama item tidak ditemukan dalam data transaksi
    '''
    try: # Mencoba mengubah nama barang
      temp = self.data_item[name_item] # Menyimpan data barang sebelumnya
      self.data_item.pop(name_item) # Menghapus nama barang lama
      self.data_item.update({new_name: temp}) # Menambahkan data barang dengan nama baru
    #Menangkap KeyError apabila nama barang yang ingin diubah tidak ada dalam daftar transaksi
    except KeyError:
      print(f"Barang yang bernama '{name_item}' tidak ada di daftar transaksi.") # Menampilkan pesan error

  def check_data_item(self):
    '''
    Menampilkan daftar transaksi belanja barang beserta diskon dan total akhir pembayaran.
    
    Returns:
        Tampilan tabel data transaksi belanja barang.
    '''
    if(len(self.data_item) == 0): #Memeriksa panjang data pada variabel self.data_item apakah yang bernilai True atau benar
        print('Daftar Semua Transaksi Belanja Barang Telah Dihapus') #Mencetak string 'Daftar Semua Transaksi Belanja Barang Telah Dihapus'
    else:
        # Membuat string 'Daftar Transaksi Belanja Barang'
        kata = 'Daftar Transaksi Belanja Barang'  
        # Mencetak string tsb dengan rata tengah dan lebar 70 karakter
        print(kata.center(70))
        # Membuat dataframe dari data item dan menukar posisi baris dan kolom menjadi kolom dan baris 
        data = pd.DataFrame(self.data_item).T
        # Memberikan nama kolom pada dataframe 
        data.columns = ['Jumlah Barang', 'Harga Satuan', 'Total Harga'] 
        # Reset index pada dataframe dan mencampurkan data dengan variabel 'index' sebagai variabel 'id_vars'
        data = data.reset_index().melt(id_vars='index', var_name='Atribut', value_name='Nilai')
        # Membalikan pivot dari dataframe dengan index sebagai 'index' dan kolom sebagai 'Atribut' 
        data = data.pivot(index='index', columns='Atribut', values='Nilai')
        # Menambahkan kolom 'Nama Barang' dengan index sebelumnya 
        data['Nama Barang'] = data.index 
        # Reset index pada dataframe
        data.index = range(len(data))
        # Menghitung total harga dari kolom 'Total Harga' pada dataframe
        total_price = data['Total Harga'].sum()
        # Menghitung diskon dengan memanggil method 'total_discount' dengan parameter total_price
        total_discount = self.total_discount(total_price)
        # Menghitung harga akhir dengan mengurangi total_price dengan hasil kali total_price dan total_discount 
        end_price = total_price - (total_price * total_discount)
        # Menambahkan baris 'Total Bayar' dengan isi 'Rp total_price' pada dataframe 
        data.loc[len(data)] = ['Total Bayar', ' ', 'Rp '+ str(total_price), '']
        # Menambahkan baris 'Diskon Yang Diperoleh' dengan isi 'total_discount * 100 + %' pada dataframe 
        data.loc[len(data)] = ['Diskon Yang Diperoleh', ' ', str(total_discount*100) + ' %', '']
        # Menambahkan baris 'Total Akhir Pembayaran' dengan isi 'Rp end_price' pada dataframe
        data.loc[len(data)] = ['Total Akhir Pembayaran', ' ', 'Rp ' + str(end_price), ''] 
        # Mengurutkan kolom pada dataframe
        data = data[['Nama Barang', 'Jumlah Barang', 'Harga Satuan', 'Total Harga']] 
        # Mencetak isi dari DataFrame data dengan format Markdown
        print(data.to_markdown()) 


  def delete_item(self, name_item):
    '''
    Fungsi ini digunakan untuk menghapus item transaksi.

    Arguments:
    name_item (str) : Nama barang yang akan dihapus.

    Returns:
    None

    Raises:
    Exception: Error akan terjadi jika barang yang dicari tidak ada pada daftar transaksi.
    '''
    if name_item in self.data_item: # Mengecek apakah nama barang ada di data transaksi
      self.data_item.pop(name_item) # Menghapus data barang dari transaksi jika ada
    else:
      # Tampilkan pesan error jika barang tidak ada dalam data transaksi
      print(f"Barang yang bernama '{name_item}' tidak ada di transaksi.")

  def reset_transaction(self):
    '''
    Fungsi yang digunakan untuk mereset atau menghapus semua data transaksi
    
    Returns:
    -------
    None
    '''
    self.data_item.clear() #Menghapus semua elemen yang ada dalam dictionary.

  
  def total_discount(self, total_price):
    '''
    Fungsi yang menghitung diskon transaksi
    
    Arguments:
    total_price : int    Jumlah harga total barang
    
    Returns:
    float       Persentase diskon transaksi
    '''
    if total_price > 200_000: # Memeriksa apakah total harga lebih besar dari 200.000
      return 0.05 # Jika ya, maka memberikan diskon sebesar 5%
    elif total_price > 300_000: # Memeriksa apakah total harga lebih besar dari 300.000
      return 0.08 # Jika ya, maka memberikan diskon sebesar 8%
    elif total_price > 500_000: # Memeriksa apakah total harga lebih besar dari 500.000
      return 0.1 # Jika ya, maka memberikan diskon sebesar 10%
    else: # Jika tidak ada diskon yang diterima
      return 0 # Maka memberikan diskon 0%
